/* Problem 1: Multiples of 3 and 5Passed

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below the provided parameter value number. */
function multiplesOf3and5(number) {
  let multiples = [], index = number - 1;
  while (index > 0) {
    if (index % 3 === 0 || index % 5 === 0) {
      multiples.push(index);
      index--;
    } else {
      index--;
    }
  }
  console.log(multiples);
  return multiples.reduce((a, b) => a + b);
}
//console.log(multiplesOf3and5(1000));

/* Problem 2: Even Fibonacci Numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence that do not exceed the nth term, find the sum of the even-valued terms. */
function fiboEvenSum(number) {
  let terms = new Array(number), index = 2;
  terms[0] = 1;
  terms[1] = 2;
  // if number is less than higest number in starting terms array
  if (number <= terms[1]) return terms[1];
  while (index < number) {
    terms[index] = terms[index - 1] + terms[index - 2];
    index++;
  }
  return terms.filter(x => x % 2 === 0).reduce((a, b) => a + b);
}
//console.log(fiboEvenSum(23));  //60696

/* Problem 3: Largest prime factor

The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the given number? */

// First attempt
function prime(number) {
  let prime = false, factor = 2;
  for (factor; factor <= number; factor++) {
    if (number / factor === 1) {
      prime = true;
    } else if (number % factor !== 0) {
      continue;
    } else {
      break;
    }
  }
  return prime;
}

function largestPrimeFactor(number) {
  let primes = [];
  function breakdown(number, count = 2) {
    for (count; count <= number; count++) {
      if (number === count && prime(count)) {
        console.log("1, number: " + number + ", count: " + count);
        primes.push(count);
        break;
      }
      if (number % count === 0) {
        number = number / count;
        if (prime(count) && prime(number)) {
          primes.push(count);
          primes.push(number);
          break;
        }
        if (prime(count) && !prime(number)) {
          primes.push(count);
          breakdown(number, count);
          break;
        } else {
          breakdown(count);
          break;
        }
      }
    }
  }
  breakdown(number);
  console.log(primes)
  return Math.max(...primes);
}
//console.log(largestPrimeFactor(24));  //6875

// Second Attempt
function largestPFactor(number) {
  let largest, factor = 2;
  for (factor; factor <= number; factor++) {
    //console.log(`number: ${number}, factor: ${factor}`)
    if (number % factor === 0) {
      largest = factor;
      number = number / largest;
      //console.log(`largest: ${largest}, number: ${number}`)
      factor--;  // keep factor the same to check next number
    }
  }
  return largest;
}
//console.log(largestPFactor(24));


/* Project Euler: Problem 4: Largest palindrome product

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two n-digit numbers. */
// First attempt
function largestPalindromeProduct(n) {
  function startingNumber(length) {
    let num = []
    for (let i = 0; i < length; i++) {
      num.push("9");
    }
    return Number(num.join(""));
  }
  let number1 = startingNumber(n);
  let number2 = startingNumber(n);

  function palindrome(num) {
    let result = true;
    let numArr = num.toString().split("").map(Number);
    let start = 0;
    let end = num.toString().split("").length;
    for (start; start <= Math.floor(end / start); start++) {
      let check = end - 1 - start;
      if (numArr[start] === numArr[check]) {
        continue;
      } else {
        result = false;
        break;
      }
    }
    return result;
  }

  let result = null;
  for (number1; number1 >= 0; number1--) {

    for (number2; number2 >= 0; number2--) {
      let value = number1 * number2;

      if (palindrome(value)) {
        //console.log(`number1: ${number1}, number2: ${number2}, value: ${value}`);
        if (result < value) result = value;
        break;
      }
    }
    number2 = number1;
  }
  return result;
}
//console.log(largestPalindromeProduct(3));

// Second Attempt (shorten)
function largestPalProduct(n) {
  function highest(length) {
    let num = []
    for (let i = 0; i < length; i++) {
      num.push("9");
    }
    return Number(num.join(""));
  }
  let highNum = highest(n);

  let result = null, number1 = highNum, number2 = highNum;
  for (number1; number1 >= 0; number1--) {
    for (number2; number2 >= 0; number2--) {
      let value = number1 * number2;
      let reverse = Number(new String(value).split("").reverse().join(""));
      if (reverse === value) {
        if (result < value) {
          result = value;
          break;
        }
      }
    }
    number2 = number1;
  }
  return result;
}
//console.log(largestPalProduct(3)); //906609

/* Project Euler: Problem 5: Smallest multiple

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to n? */
// 1st attempt
function smallestMult(n) {
  let numerator = n;
  let denomenator = n;
  for (numerator; ; numerator++) {
    for (denomenator; denomenator > 0; denomenator--) {
      if (numerator % denomenator === 0) continue;
      else break;
    }
    if (denomenator === 0) {
      break;
    } else {
      denomenator = n;
      continue;
    }
  }
  return numerator;
}
//console.log(smallestMult(20));
// 2nd attempt, longer but much faster
function smallestMultiple(n) {
  function lcm(a, b) {
    function getPrimes(number) {
      let primes = [], factor = 2;
      for (factor; factor <= number; factor++) {
        if (number % factor === 0) {
          primes.push(factor);
          number = number / Math.max(...primes);
          factor--;  // keep factor the same to check next number
        }
      }
      return primes;
    }

    let aPrimes = getPrimes(a);
    let bPrimes = getPrimes(b);
    let longestArr = aPrimes.length >= bPrimes.length ? aPrimes.length : bPrimes.length;
    let lcmArr = [];
    for (let i = 0; i < longestArr; i++) {
      if (aPrimes[i] === bPrimes[i]) {
        lcmArr.push(aPrimes[i]);
        aPrimes.shift();
        bPrimes.shift();
        i--;
        longestArr = aPrimes.length >= bPrimes.length ? aPrimes.length : bPrimes.length;
      }
      if (aPrimes[i] - bPrimes[i] > 0) {
        lcmArr.push(bPrimes[i]);
        bPrimes.shift();
        i--;
        longestArr = aPrimes.length >= bPrimes.length ? aPrimes.length : bPrimes.length;
      }
      if (aPrimes[i] - bPrimes[i] < 0) {
        lcmArr.push(aPrimes[i]);
        aPrimes.shift();
        i--;
        longestArr = aPrimes.length >= bPrimes.length ? aPrimes.length : bPrimes.length;
      }
    }
    let concatArrs = lcmArr.concat(aPrimes, bPrimes);
    return concatArrs.reduce((a, b) => a * b);
  }

  let multiples, a = 1, b = 2;
  while (b <= n) {
    let multiple = lcm(a, b);
    multiples = multiple;
    a = multiple;
    b++;
  }
  return multiples;
}
//console.log(smallestMultiple(20));

/* Project Euler: Problem 6: Sum square difference

The sum of the squares of the first ten natural numbers is,
1^2 + 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)2 = 55^2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
Find the difference between the sum of the squares of the first n natural numbers and the square of the sum. */

function sumSquareDifference(n) {
  let count = 1;
  let sum = 0;
  let squared = [];
  while (count <= n) {
    sum = sum + count;
    squared.push(Math.pow(count, 2));
    count++;
  }
  return Math.pow(sum, 2) - squared.reduce((a, b) => a + b);
}
//console.log(sumSquareDifference(100));

/* Project Euler: Problem 7: 10001st prime

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the nth prime number? */

function nthPrime(n) {
  let number = 3, primes = [2];
  while (primes.length < n) {
    let i = 0, isPrime = true
    for (i; i < primes.length; i++) {
      if (number % primes[i] === 0) {
        isPrime = false;
        break;
      }
    }
    if (isPrime) primes.push(number);
    number += 2; // 2 is only even prime number, so only check odd
  }
  return primes[primes.length - 1];
}
//console.log(nthPrime(10001));

/* Project Euler: Problem 8: Largest product in a series

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
Find the n adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product? */

function largestProductinaSeries(n) {
  let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0];
  
  let from = 0, to = n, largest = null;
  while (to < thousandDigits.length) {
    let toSum = thousandDigits.slice(from, to);
    let sum = toSum.reduce( (a, b) => a * b);
    largest = sum > largest ? sum : largest;
    from++;
    to++;
  }
  return largest;
}

console.log(largestProductinaSeries(13));
