/* Problem 1: Multiples of 3 and 5Passed

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below the provided parameter value number. */
function multiplesOf3and5(number) {
  let multiples = [], index = number - 1;
  while (index > 0) {
    if (index % 3 === 0 || index % 5 === 0) {
      multiples.push(index);
      index--;
    } else {
      index--;
    }
  }
  console.log(multiples);
  return multiples.reduce( (a, b) => a + b);
}
//console.log(multiplesOf3and5(1000));

/* Problem 2: Even Fibonacci Numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence that do not exceed the nth term, find the sum of the even-valued terms. */
function fiboEvenSum(number) {
  let terms = new Array(number), index = 2;
  terms[0] = 1;
  terms[1] = 2;
  // if number is less than higest number in starting terms array
  if (number <= terms[1]) return terms[1]; 
  while (index < number) {
    terms[index] = terms[index - 1] + terms[index - 2];
    index++;
  }
  return terms.filter( x => x % 2 === 0).reduce( (a,b) => a + b);
}
//console.log(fiboEvenSum(23));  //60696

/* Problem 3: Largest prime factor

The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the given number? */

// First attempt
function prime(number) {
  let prime = false, factor = 2;
  for (factor; factor <= number; factor++) {
    if (number / factor === 1) {
      prime = true;
    } else if (number % factor !== 0) {
      continue;
    } else {
      break;
    }
  }
  return prime;
}

function largestPrimeFactor(number) {
  let primes = [];
  function breakdown(number, count = 2) {
    for (count; count <= number; count++) {
      if (number === count && prime(count)) {
        console.log("1, number: " + number + ", count: " + count);
        primes.push(count);
        break;
      }
      if (number % count === 0) {
        number = number / count;
        if (prime(count) && prime(number)) {
          primes.push(count);
          primes.push(number);
          break;
        } 
        if (prime(count) && !prime(number)) {
          primes.push(count);
          breakdown(number, count);
          break;
        } else {
          breakdown(count);
          break;
        }
      }
    }
  }
  breakdown(number);
  console.log(primes)
  return Math.max(...primes);
}
//console.log(largestPrimeFactor(24));  //6875

// Second Attempt
function largestPFactor(number) {
  let largest, factor = 2;
  for (factor; factor <= number; factor++) {
    //console.log(`number: ${number}, factor: ${factor}`)
    if (number % factor === 0) {
      largest = factor;
      number = number / largest;
      //console.log(`largest: ${largest}, number: ${number}`)
      factor--;  // keep factor the same to check next number
    }
  }
  return largest;
}
//console.log(largestPFactor(24));


